---
import ThemeToggle from "../components/ThemeToggle.astro";
import NavMenu from "../components/NavMenu.astro";
import { ViewTransitions } from "astro:transitions";
import siteConfig from "../site-config";

// define types
export type Props = {
	title?: string;
	description?: string;
	image?: { src: string; alt?: string };
	pageType?: "website" | "article";
};

// get props data
const {
	description = siteConfig.description,
	title = siteConfig.title,
	pageType = siteConfig.pageType,
	image = siteConfig.image,
} = Astro.props;

const canonicalURL = new URL(Astro.request.url, Astro.site);

let resolvedImage = undefined;
try {
	resolvedImage = image?.src
		? {
			src: new URL(image.src, Astro.site).toString(),
			alt: image.alt,
		} : undefined;
} catch {
	resolvedImage = undefined;
}

function formatCanonicalURL(url: string | URL) {
	const path = url.toString();
	const hasQueryParams = path.includes("?");
	// If there are query params, make sure tshe URL has no trailing slash
	if (hasQueryParams) {
		path.replace(/\/?$/, "");
	}
	// otherwise, canonical URL always has a trailing slash
	return path.replace(/\/?$/, hasQueryParams ? "" : "/");
}
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/png" href="/favicon.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<script>
            if (localStorage.theme === 'dark') {
                document.documentElement.classList.add('dark');
            }
        </script>
        <ViewTransitions />
	</head>
	<body>
		<slot />
		<div class="theme-toggle-container">
			<ThemeToggle class="theme-toggle-container" />
		</div>
	</body>
</html>
<style is:global>
	:root {
		color: black;
		--accent: 10, 70, 240;
		--accent-light: 30, 170, 255;
		--accent-dark: 60, 190, 240;
		--accent-gradient: linear-gradient(
			20deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
		/* height: 100%;
		background: -webkit-radial-gradient(top left, ellipse, #FDE152 0%, transparent), linear-gradient(to bottom, #FA715F, #FA715F 60%, #DB1174, #9B4CA7); */
	}
	.dark {
		color: white;
		background: #13151a;
		--accent: 10, 70, 240;
		--accent-light: 30, 170, 255;
		--accent-dark: 60, 190, 240;
		--accent-gradient: linear-gradient(
			20deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		font-family: system-ui, sans-serif;
		background: white;
		background-size: 224px;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
	.hidden {
		display: none;
	}
	.theme-toggle-container {
		position: absolute; 
		right: 0; 
		top: 1rem; 
		z-index: 10; 

		@media (min-width: 768px) { 
			top: 2rem; 
		}
	}
</style>
