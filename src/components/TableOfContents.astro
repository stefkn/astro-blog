---
import TableOfContentsHeading from "./TableOfContentsHeading.astro";

const { headings } = Astro.props;
const toc = buildToc(headings);

function buildToc(headings: any) {
  const toc: any = [];
  const parentHeadings = new Map();
  headings.forEach((h: any) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1).subheadings.push(heading);
    }
  });
  return toc;
}
---

<nav class="toc">
  <ul>
    {toc.map((heading: any) => <TableOfContentsHeading heading={heading} />)}
  </ul>
  <svg class="toc-progress" xmlns="http://www.w3.org/2000/svg">
    <path
      class="toc-marker"
      fill="none"
      stroke="#ff27a7"
      stroke-width="4"
      stroke-dashoffset="1"
      stroke-linecap="round"
      stroke-linejoin="round"></path>
  </svg>
</nav>

<style>
  .toc {
    font-family: monospace;
    margin: 2rem 1rem 1rem 0rem;
    font-size: 14px;
    li > a {
      font-weight: bold;
    }
    ul {
      a:-webkit-any-link {
        color: blue;
      }
      list-style: none;
      margin: 0;
      padding: 0;
      display: grid;
      gap: 0.75rem;
      padding-left: 0.75rem;
    }
    li {
      gap: 0.75rem;
      display: grid;
    }
  }
  .toc-progress {
    position: absolute;
    top: -5px;
    left: -10px;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }
  path.toc-marker {
    transition: stroke-dasharray 0.3s ease;
    pointer-events: none;
  }
</style>

<script>
document.addEventListener("astro:page-load", () => {
  const linkStarts = new WeakMap();
  const linkEnds = new WeakMap();
  var lastSeenHeadingLink:Element|null = null;
  var seenHeading = false;

  function drawPath() {
    const path = document.querySelector("path.toc-marker");
    const links = Array.from(document.querySelectorAll("nav.toc a"));
    if (!links.length) return;

    let pathData:[] = [];
    let left = 10;
    links.forEach((link, i) => {
      // @ts-ignore
      const x = link.offsetLeft;
      // @ts-ignore
      const y = link.offsetTop;
      // @ts-ignore
      const height = link.offsetHeight;
      if (i === 0) {
        linkStarts.set(link, 0);
        // @ts-ignore
        pathData.push("M", x, y, "L", x, y + height);
      } else {
        // @ts-ignore
        if (left !== x) pathData.push("L", left, y);
        // @ts-ignore
        pathData.push("L", x, y);
        // @ts-ignore
        path.setAttribute("d", pathData.join(" "));
        // @ts-ignore
        linkStarts.set(link, path.getTotalLength());
        // @ts-ignore
        pathData.push("L", x, y + height);
      }
      left = x;
      path!.setAttribute("d", pathData.join(" "));
      // @ts-ignore
      linkEnds.set(link, path!.getTotalLength());
    });
  }
});
</script>
