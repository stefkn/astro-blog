---
import TableOfContentsHeading from "./TableOfContentsHeading.astro";

const { headings } = Astro.props;
const toc = buildToc(headings);

function buildToc(headings: any) {
  const toc: any = [];
  const parentHeadings = new Map();
  headings.forEach((h: any) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      parentHeadings.get(heading.depth - 1).subheadings.push(heading);
    }
  });
  return toc;
}
---

<nav class="toc">
  <ul>
    {toc.map((heading: any) => <TableOfContentsHeading heading={heading} />)}
  </ul>
  <svg class="toc-progress" xmlns="http://www.w3.org/2000/svg">
    <path
      class="toc-marker"
      fill="none"
      stroke="#ff27a7"
      stroke-width="4"
      stroke-dashoffset="1"
      stroke-linecap="round"
      stroke-linejoin="round"></path>
  </svg>
</nav>

<style>
  .toc {
    font-family: monospace;
    margin: 2rem 1rem 1rem 0rem;
    font-size: 14px;
    li > a {
      font-weight: bold;
    }
    ul {
      a:-webkit-any-link {
        color: blue;
      }
      list-style: none;
      margin: 0;
      padding: 0;
      display: grid;
      gap: 0.75rem;
      padding-left: 0.75rem;
    }
    li {
      gap: 0.75rem;
      display: grid;
    }
  }
  .toc-progress {
    position: absolute;
    top: -5px;
    left: -10px;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }
  path.toc-marker {
    transition: stroke-dasharray 0.3s ease;
    pointer-events: none;
  }
</style>

<script>
  // thanks to https://kld.dev/toc-animation/ for this code!

  document.addEventListener("astro:page-load", () => {
    const linkStarts = new WeakMap();
    const linkEnds = new WeakMap();
    var lastSeenHeadingLink: Element | null = null;
    var seenHeading = false;

    function drawPath() {
      const path = document.querySelector("path.toc-marker") as SVGPathElement;
      const links = Array.from(document.querySelectorAll("nav.toc a"));
      if (!links.length) return;

      const pathData: string[] = [];
      let left = 10;
      links.forEach((link, i) => {
        const x = (link as HTMLElement).offsetLeft;
        const y = (link as HTMLElement).offsetTop;
        const height = (link as HTMLElement).offsetHeight;

        if (i === 0) {
          linkStarts.set(link, 0);
          pathData.push(
            "M",
            String(x),
            String(y),
            "L",
            String(x),
            String(y + height),
          );
        } else {
          if (left !== x) {
            pathData.push("L", String(left), String(y));
          }
          pathData.push("L", String(x), String(y));

          if (path) {
            path.setAttribute("d", pathData.join(" "));
          }

          linkStarts.set(link, path.getTotalLength());
          pathData.push("L", String(x), String(y + height));
        }

        left = x;
        path!.setAttribute("d", pathData.join(" "));
        linkEnds.set(link, path!.getTotalLength());
      });
    }

    function addIntersectionObserver() {
      const observer = new IntersectionObserver((observerInteractions) => {
        observerInteractions.forEach((interaction) => {
          const heading = interaction.target;
          if (!heading) return;
          const id = heading.getAttribute("id");
          const link = document.querySelector(`nav.toc li a[href="#${id}"]`);
          if (!link) return;
          const addRemove = interaction.intersectionRatio > 0 ? "add" : "remove";

          link.classList[addRemove]("active");

        });

        seenHeading = false;
        if (document.querySelector("path.toc-marker")) {
          updatePath();
        }
      });

      function updatePath() {
        if (!document.querySelector("path.toc-marker")) {
          return;
        }
        const path = document.querySelector("path.toc-marker");
        // @ts-ignore
        const pathLength = path!.getTotalLength();
        let activeLinks = document.querySelectorAll("a.active");
        let linkStart = pathLength;
        let linkEnd = 0;

        if (activeLinks.length === 0 && lastSeenHeadingLink !== null) {
          lastSeenHeadingLink?.classList.add("active");
          lastSeenHeadingLink = null;
        }

        activeLinks = document.querySelectorAll("a.active");

        activeLinks.forEach((link) => {
          // Set linkStart to the top of the earliest active link
          linkStart = Math.min(linkStart, linkStarts.get(link));
          // Set linkEnd to the bottom of the furthest active link
          linkEnd = Math.max(linkEnd, linkEnds.get(link));
        });
        // If there are no active links, hide the path
        // @ts-ignore
        path!.style.display = activeLinks.length ? "inline" : "none";

        // FINALLY, do the thing!
        path!.setAttribute(
          "stroke-dasharray",
          `1 ${linkStart} ${linkEnd - linkStart} ${pathLength}`,
        );
      }
  });
</script>
